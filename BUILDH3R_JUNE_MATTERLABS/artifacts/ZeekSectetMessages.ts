export default ({
    "ZeekMessages": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "name": "MessageReceived",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "getLastMessage",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getTotalMessages",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_message",
              "type": "string"
            }
          ],
          "name": "sendMessage",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "metadata": {
        "optimizer_settings": {
          "is_debug_logging_enabled": false,
          "is_fallback_to_size_enabled": false,
          "is_system_request_memoization_disabled": false,
          "is_verify_each_enabled": false,
          "level_back_end": "Aggressive",
          "level_middle_end": "Aggressive",
          "level_middle_end_size": "Zero"
        },
        "solc_metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getLastMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/buildh3r-zksync-workshop/contracts/ZeekSecretMessages.sol\":\"ZeekMessages\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"/buildh3r-zksync-workshop/contracts/ZeekSecretMessages.sol\":{\"keccak256\":\"0xbacfc968b855ac9346352e20fbe45e0a6e8886236fc0049baba22ba7f9a9af2b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aaffcd9349067e0e4b8a4393fa46c012bb94f2dd72d20b91ac42d2cf2404202f\",\"dweb:/ipfs/QmZgjrh4GXNXczSPLSDFBNLD7hRJbpjjYUmyvpV4i4hSNR\"]}},\"version\":1}",
        "solc_version": "0.8.19",
        "solc_zkvm_edition": null,
        "zk_version": "1.4.0"
      },
      "evm": {
        "legacyAssembly": null,
        "assembly": "\t.text\n\t.file\t\"ZeekSecretMessages.sol:ZeekMessages\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[4]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_5[0], r2, r4\n\tjump.eq\t@.BB0_47\n\tsub.s!\t@CPI0_6[0], r2, r4\n\tjump.eq\t@.BB0_11\n\tsub.s!\t@CPI0_7[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_24[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tadd\tr1, r0, stack-[4]\n\tst.1\t128, r1\n\tadd\t28, r0, r1\n\tst.1\t160, r1\n\tadd\t@CPI0_1[0], r0, r1\n\tst.1\t192, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI0_3[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[4], r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_4[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_47:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_50\n\tadd\t@CPI0_12[0], r0, r1\n\tst.1\t128, r1\n\tadd\t32, r0, r1\n\tst.1\t132, r1\n\tadd\t29, r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t196, r1\n\tadd\t@CPI0_14[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_11:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_15[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r2\n\tadd\t@CPI0_16[0], r0, r5\n\tsub!\tr2, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_16[0], r2, r2\n\tsub!\tr2, r0, r7\n\tadd.ge\tr0, r0, r5\n\tsub.s!\t@CPI0_16[0], r2, r2\n\tadd.ne\tr6, r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t4, r4, r5\n\tptr.add\tr1, r5, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_17[0], r2, r6\n\tjump.ge\t@.BB0_16\n\tadd\t191, r2, r6\n\tsub.s\t32, r0, r8\n\tand\tr6, r8, r6\n\tsub.s!\t@CPI0_15[0], r6, r7\n\tjump.gt\t@.BB0_16\n\tst.1\t64, r6\n\tst.1\t128, r2\n\tadd\tr4, r2, r4\n\tadd\t36, r4, r4\n\tsub!\tr4, r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r5, r3\n\tptr.add\tr1, r3, r1\n\tand\t31, r2, r3\n\tshr.s!\t5, r2, r4\n\tjump.eq\t@.BB0_63\n\tadd\tr0, r0, r5\n.BB0_22:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t160, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_22\n.BB0_63:\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_24\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r3, r3\n\tadd\t160, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_24:\n\tadd\t160, r2, r1\n\tst.1\tr1, r0\n\tsload\tr0, r1\n\tsub.s!\t@CPI0_15[0], r1, r2\n\tjump.gt\t@.BB0_16\n\tadd\t1, r1, r2\n\tsstore\tr0, r2\n\tadd\t@CPI0_18[0], r1, r4\n\tst.1\t0, r0\n\tld.1\t128, r5\n\tsub.s!\t@CPI0_15[0], r5, r1\n\tjump.gt\t@.BB0_16\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_27\n\tsub.s!\t32, r3, r1\n\tadd\tr8, r0, stack-[4]\n\tjump.lt\t@.BB0_32\n\tadd\tr3, r0, stack-[1]\n\tadd\tr5, r0, stack-[3]\n\tadd\tr4, r0, stack-[2]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[1], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[2], r0, r4\n\tjump.ge\t@.BB0_32\n.BB0_33:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_33\n.BB0_32:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB0_43\n\tadd\tr5, r0, stack-[3]\n\tadd\tr4, r0, stack-[2]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r3\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[3], r3, r2\n\tadd\t160, r0, r3\n\tld\tr1, r1\n\tjump.eq\t@.BB0_40\n\tadd\t32, r0, r4\n\tadd\tr0, r0, r3\n.BB0_38:\n\tadd\tr4, r0, r5\n\tadd\t128, r5, r4\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r3\n\tsub!\tr3, r2, r6\n\tjump.lt\t@.BB0_38\n\tadd\t160, r5, r3\n.BB0_40:\n\tadd\tstack-[3], r0, r5\n\tsub!\tr2, r5, r2\n\tjump.ge\t@.BB0_42\n\tshl.s\t3, r5, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r4\n\tshr\tr4, r2, r2\n\txor\tr2, r4, r2\n\tld.1\tr3, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB0_42:\n\tshl.s\t1, r5, r1\n\tor\t1, r1, r1\n\tadd\tstack-[2], r0, r4\n\tjump\t@.BB0_34\n.BB0_50:\n\tst.1\t0, r0\n\tadd\t@CPI0_8[0], r1, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r5\n\tadd.ne\tr4, r0, r5\n\tsub.s!\t31, r5, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\txor\tr2, r4, r4\n\tand!\t1, r4, r4\n\tjump.eq\t@.BB0_51\n.BB0_27:\n\tadd\t@CPI0_22[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tjump\t@.BB0_17\n.BB0_51:\n\tst.1\t128, r5\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_55\n\tadd\tr5, r0, stack-[4]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\t160, r0, r2\n\tadd\tstack-[4], r0, r5\n\tsub!\tr5, r0, r3\n\tjump.eq\t@.BB0_53\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_59:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t160, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r5, r4\n\tjump.lt\t@.BB0_59\n\tadd\t192, r2, r1\n\tjump\t@.BB0_52\n.BB0_55:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr5, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_52:\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\t@CPI0_10[0], r2, r1\n\tsub.s!\t@CPI0_11[0], r1, r1\n\tjump.ge\t@.BB0_53\n.BB0_16:\n\tadd\t@CPI0_22[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n.BB0_17:\n\tst.1\t4, r1\n\tadd\t@CPI0_23[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_53:\n\tst.1\t64, r2\n\tadd\t32, r0, r1\n\tst.1.inc\tr2, r1, r3\n\tld.1\t128, r1\n\tst.1\tr3, r1\n\tadd\t64, r2, r3\n\tsub!\tr1, r0, r4\n\tjump.eq\t@.BB0_62\n\tadd\tr0, r0, r4\n.BB0_61:\n\tadd\tr4, r3, r5\n\tadd\t160, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_61\n.BB0_62:\n\tadd\tr1, r3, r3\n\tst.1\tr3, r0\n\tadd\t95, r1, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_43:\n\tsub!\tr5, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_45\n\tld.1\t160, r1\n.BB0_45:\n\tshl.s\t3, r5, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r5, r2\n\tor\tr1, r2, r1\n.BB0_34:\n\tsstore\tr4, r1\n\tld.1\t64, r1\n\tadd\t96, r1, r2\n\tadd\t@CPI0_19[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tadd\t@CPI0_20[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r1, r2\n\tadd\t37, r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_21[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI0_3[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n__farcall:\n.func_begin1:\n.tmp0:\n\tfar_call\tr1, r2, @.BB1_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB1_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end1:\n\n__staticcall:\n.func_begin2:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB2_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 40887307890551021078029815392828357765465533879070287318717952145630278189056\nCPI0_2:\n\t.cell 904625697166532776746648320380374280103671762806220510288822025476863164416\nCPI0_3:\n\t.cell -3701560033022096490355571927437983504232896312602834118149581822783393127325\nCPI0_4:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_5:\n\t.cell 1382807406\nCPI0_6:\n\t.cell 1184661776\nCPI0_7:\n\t.cell 343838984\nCPI0_8:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702946\nCPI0_9:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_10:\n\t.cell -18446744073709551616\nCPI0_11:\n\t.cell -18446744073709551488\nCPI0_12:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_13:\n\t.cell 35476746018886498095000454298384447921156590119614531280828786757529925320704\nCPI0_14:\n\t.cell 7922816253787617000789217640448\nCPI0_15:\n\t.cell 18446744073709551615\nCPI0_16:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_17:\n\t.cell 18446744073709551616\nCPI0_18:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_19:\n\t.cell 47702036830737818317158763463132207685405299440092130242684564419198039621632\nCPI0_20:\n\t.cell 40840893601154115765630274458627041386839104197723316096072827403719963665253\nCPI0_21:\n\t.cell 904625697166532776746648320380374280103671765341521708384097587035446968320\nCPI0_22:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_23:\n\t.cell 2852213850513516153367582212096\nCPI0_24:\n\t.cell 2535301202817642044428229017600\n",
        "bytecode": {
          "object": "00040000000000020000008003000039000000400030043f0000000003010019000000600330027000000063033001970000000102200190000000190000c13d000000040230008c0000017a0000413d000000000201043b000000e002200270000000680420009c000000340000613d000000690420009c000000440000613d0000006a0120009c0000017a0000c13d0000000001000416000000000101004b0000017a0000c13d000000000100041a000000800010043f0000007b01000041000001870001042e0000000001000416000000000101004b0000017a0000c13d0000002001000039000400000001001d000000800010043f0000001c01000039000000a00010043f0000006401000041000000c00010043f00000063010000410000000002000414000000630320009c0000000002018019000000c00120021000000065011001c70000800d02000039000000010300003900000066040000410186017c0000040f00000001012001900000017a0000613d0000000401000029000001000010044300000120000004430000006701000041000001870001042e0000000001000416000000000101004b0000017a0000c13d000000000100041a000000000201004b000000f00000c13d0000006f01000041000000800010043f0000002001000039000000840010043f0000001d01000039000000a40010043f0000007001000041000000c40010043f000000710100004100000188000104300000000002000416000000000202004b0000017a0000c13d000000040230008a000000200220008c0000017a0000413d0000000402100370000000000402043b000000720240009c0000017a0000213d00000023024000390000007305000041000000000632004b000000000600001900000000060580190000007302200197000000000702004b0000000005008019000000730220009c000000000506c019000000000205004b0000017a0000c13d0000000405400039000000000251034f000000000202043b000000740620009c0000012c0000813d000000bf06200039000000200800008a000000000686016f000000720760009c0000012c0000213d000000400060043f000000800020043f00000000042400190000002404400039000000000334004b0000017a0000213d0000002003500039000000000131034f0000001f0320018f0000000504200272000000780000613d00000000050000190000000506500210000000000761034f000000000707043b000000a00660003900000000007604350000000105500039000000000645004b000000700000413d000000000503004b000000870000613d0000000504400210000000000141034f0000000303300210000000a004400039000000000504043300000000053501cf000000000535022f000000000101043b0000010003300089000000000131022f00000000013101cf000000000151019f0000000000140435000000a0012000390000000000010435000000000100041a000000720210009c0000012c0000213d0000000102100039000000000020041b00000075041000410000000000000435000000800500043d000000720150009c0000012c0000213d000000000104041a000000010210019000000001011002700000007f0310018f000000000301c0190000001f0130008c00000000010000190000000101002039000000010110018f000000000112004b000000fd0000c13d000000200130008c000400000008001d000000c10000413d000100000003001d000300000005001d000200000004001d000000000040043500000063010000410000000002000414000000630320009c0000000002018019000000c0012002100000006c011001c70000801002000039018601810000040f00000001022001900000017a0000613d00000003050000290000001f025000390000000502200270000000200350008c0000000002004019000000000301043b00000001010000290000001f01100039000000050110027000000000011300190000000002230019000000000312004b0000000204000029000000c10000813d000000000002041b0000000102200039000000000312004b000000bd0000413d0000001f0150008c000001500000a13d000300000005001d000200000004001d000000000040043500000063010000410000000002000414000000630320009c0000000002018019000000c0012002100000006c011001c70000801002000039018601810000040f000000010220019000000004030000290000017a0000613d0000000302300180000000a003000039000000000101043b000000e10000613d00000020040000390000000003000019000000000504001900000080045000390000000004040433000000000041041b000000200450003900000001011000390000002003300039000000000623004b000000d70000413d000000a0035000390000000305000029000000000252004b000000ec0000813d0000000302500210000000f80220018f000000010400008a000000000224022f000000000242013f0000000003030433000000000223016f000000000021041b000000010150021000000001011001bf00000002040000290000015b0000013d00000000000004350000006b01100041000000000201041a000000010320019000000001042002700000007f0540018f000000000504c0190000001f0450008c00000000040000190000000104002039000000000442013f0000000104400190000001010000613d0000007901000041000000000010043500000022010000390000012f0000013d000000800050043f000000000303004b000001200000613d000400000005001d000000000010043500000063010000410000000002000414000000630320009c0000000002018019000000c0012002100000006c011001c70000801002000039018601810000040f00000001022001900000017a0000613d000000a0020000390000000405000029000000000305004b000001320000613d000000000101043b00000000030000190000000002030019000000000301041a000000a004200039000000000034043500000001011000390000002003200039000000000453004b000001160000413d000000c001200039000001260000013d000001000100008a000000000112016f000000a00010043f000000000105004b000000c001000039000000a0010060390000001f01100039000000200200008a000000000221016f0000006d012000410000006e0110009c000001320000813d000000790100004100000000001004350000004101000039000000040010043f0000007a010000410000018800010430000000400020043f00000020010000390000000003120436000000800100043d00000000001304350000004003200039000000000401004b000001420000613d00000000040000190000000005340019000000a006400039000000000606043300000000006504350000002004400039000000000514004b0000013b0000413d000000000331001900000000000304350000005f01100039000000200300008a000000000131016f0000006303000041000000630410009c0000000001038019000000630420009c000000000203801900000040022002100000006001100210000000000121019f000001870001042e000000000105004b0000000001000019000001540000613d000000a00100043d0000000302500210000000010300008a000000000223022f000000000232013f000000000121016f0000000102500210000000000121019f000000000014041b000000400100043d0000006002100039000000760300004100000000003204350000004002100039000000770300004100000000003204350000002002100039000000250300003900000000003204350000002002000039000000000021043500000063020000410000000003000414000000630430009c0000000003028019000000630410009c00000000010280190000004001100210000000c002300210000000000112019f00000078011001c70000800d02000039000000010300003900000066040000410186017c0000040f00000001012001900000017a0000613d0000000001000019000001870001042e000000000100001900000188000104300000017f002104210000000102000039000000000001042d0000000002000019000000000001042d00000184002104230000000102000039000000000001042d0000000002000019000000000001042d0000018600000432000001870001042e000001880001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff5a65656b2077656c636f6d657320796f7520746f207a6b53796e6321000000000200000000000000000000000000000000000060000000800000000000000000f7d0fdc395711a2233b76a4ff1de3b5657584b471fd633499a7faf1fbcaba463000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000526bf76e00000000000000000000000000000000000000000000000000000000469c811000000000000000000000000000000000000000000000000000000000147e9108290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5620200000000000000000000000000000000000020000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000008008c379a0000000000000000000000000000000000000000000000000000000004e6f206d657373616765732073656e7420746f205a65656b20796574210000000000000000000000000000000000000000000064000000800000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56369766564210000000000000000000000000000000000000000000000000000005a4b2069732074686520656e6467616d65202d204d657373616765207265636502000000000000000000000000000000000000800000000000000000000000004e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000200000008000000000000000004b7c9ab24f801d2e4570b6feb808a65b2344b23d75652aa086cf0ab390c13c2e"
        },
        "methodIdentifiers": {
          "getLastMessage()": "526bf76e",
          "getTotalMessages()": "147e9108",
          "sendMessage(string)": "469c8110"
        }
      },
      "irOptimized": "/// @use-src 0:\"/buildh3r-zksync-workshop/contracts/ZeekSecretMessages.sol\"\nobject \"ZeekMessages_63\" {\n    code {\n        {\n            /// @src 0:57:980  \"contract ZeekMessages {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            mstore(_1, 32)\n            mstore(add(_1, 32), 28)\n            mstore(add(_1, 64), \"Zeek welcomes you to zkSync!\")\n            /// @src 0:288:335  \"MessageReceived(\\\"Zeek welcomes you to zkSync!\\\")\"\n            log1(_1, /** @src 0:57:980  \"contract ZeekMessages {...\" */ 96, /** @src 0:288:335  \"MessageReceived(\\\"Zeek welcomes you to zkSync!\\\")\" */ 0xf7d0fdc395711a2233b76a4ff1de3b5657584b471fd633499a7faf1fbcaba463)\n            /// @src 0:57:980  \"contract ZeekMessages {...\"\n            let _2 := mload(64)\n            let _3 := datasize(\"ZeekMessages_63_deployed\")\n            codecopy(_2, dataoffset(\"ZeekMessages_63_deployed\"), _3)\n            return(_2, _3)\n        }\n    }\n    /// @use-src 0:\"/buildh3r-zksync-workshop/contracts/ZeekSecretMessages.sol\"\n    object \"ZeekMessages_63_deployed\" {\n        code {\n            {\n                /// @src 0:57:980  \"contract ZeekMessages {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x147e9108 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        mstore(_1, sload(_4))\n                        return(_1, 32)\n                    }\n                    case 0x469c8110 {\n                        if callvalue() { revert(_4, _4) }\n                        let _5 := 32\n                        if slt(add(calldatasize(), not(3)), _5) { revert(_4, _4) }\n                        let offset := calldataload(_3)\n                        let _6 := 0xffffffffffffffff\n                        if gt(offset, _6) { revert(_4, _4) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_4, _4) }\n                        let _7 := calldataload(add(_3, offset))\n                        let _8 := 36\n                        if gt(_7, _6)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _8)\n                        }\n                        let _9 := not(31)\n                        let memPtr := mload(_2)\n                        finalize_allocation(memPtr, add(and(add(_7, 0x1f), _9), _5))\n                        mstore(memPtr, _7)\n                        if gt(add(add(offset, _7), _8), calldatasize()) { revert(_4, _4) }\n                        calldatacopy(add(memPtr, _5), add(offset, _8), _7)\n                        mstore(add(add(memPtr, _7), _5), _4)\n                        let oldLen := sload(_4)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _8)\n                        }\n                        let _10 := 1\n                        sstore(_4, add(oldLen, _10))\n                        let slot, offset_1 := storage_array_index_access_string__dyn_ptr(oldLen)\n                        if offset_1\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, _8)\n                        }\n                        let newLen := mload(memPtr)\n                        if gt(newLen, _6)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _8)\n                        }\n                        let _11 := extract_byte_array_length(sload(slot))\n                        if gt(_11, 0x1f)\n                        {\n                            mstore(_4, slot)\n                            let data := keccak256(_4, _5)\n                            let deleteStart := add(data, shr(5, add(newLen, 0x1f)))\n                            if lt(newLen, _5) { deleteStart := data }\n                            let _12 := add(data, shr(5, add(_11, 0x1f)))\n                            let start := deleteStart\n                            for { } lt(start, _12) { start := add(start, _10) }\n                            { sstore(start, _4) }\n                        }\n                        let srcOffset := _4\n                        srcOffset := _5\n                        switch gt(newLen, 0x1f)\n                        case 1 {\n                            let loopEnd := and(newLen, _9)\n                            mstore(_4, slot)\n                            let dstPtr := keccak256(_4, _5)\n                            let i := _4\n                            for { } lt(i, loopEnd) { i := add(i, _5) }\n                            {\n                                sstore(dstPtr, mload(add(memPtr, srcOffset)))\n                                dstPtr := add(dstPtr, _10)\n                                srcOffset := add(srcOffset, _5)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(memPtr, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(slot, add(shl(_10, newLen), _10))\n                        }\n                        default {\n                            let value := _4\n                            if newLen\n                            {\n                                value := mload(add(memPtr, srcOffset))\n                            }\n                            sstore(slot, or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_10, newLen)))\n                        }\n                        /// @src 0:510:566  \"MessageReceived(\\\"ZK is the endgame - Message received!\\\")\"\n                        let _13 := /** @src 0:57:980  \"contract ZeekMessages {...\" */ mload(_2)\n                        mstore(_13, _5)\n                        mstore(add(_13, _5), 37)\n                        mstore(add(_13, _2), \"ZK is the endgame - Message rece\")\n                        mstore(add(_13, 96), \"ived!\")\n                        /// @src 0:510:566  \"MessageReceived(\\\"ZK is the endgame - Message received!\\\")\"\n                        log1(_13, /** @src 0:57:980  \"contract ZeekMessages {...\" */ 128, /** @src 0:510:566  \"MessageReceived(\\\"ZK is the endgame - Message received!\\\")\" */ 0xf7d0fdc395711a2233b76a4ff1de3b5657584b471fd633499a7faf1fbcaba463)\n                        /// @src 0:57:980  \"contract ZeekMessages {...\"\n                        return(_4, _4)\n                    }\n                    case 0x526bf76e {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        /// @src 0:872:887  \"messages.length\"\n                        let expr := /** @src 0:57:980  \"contract ZeekMessages {...\" */ sload(_4)\n                        if /** @src 0:872:891  \"messages.length > 0\" */ iszero(expr)\n                        /// @src 0:57:980  \"contract ZeekMessages {...\"\n                        {\n                            let memPtr_1 := mload(_2)\n                            mstore(memPtr_1, shl(229, 4594637))\n                            mstore(add(memPtr_1, _3), 32)\n                            mstore(add(memPtr_1, 36), 29)\n                            mstore(add(memPtr_1, 68), \"No messages sent to Zeek yet!\")\n                            revert(memPtr_1, 100)\n                        }\n                        let diff := add(expr, not(0))\n                        if gt(diff, expr)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(_4, 0x24)\n                        }\n                        /// @src 0:942:971  \"messages[messages.length - 1]\"\n                        let _14, _15 := storage_array_index_access_string__dyn_ptr(/** @src 0:951:970  \"messages.length - 1\" */ diff)\n                        /// @src 0:57:980  \"contract ZeekMessages {...\"\n                        let memPtr_2 := mload(_2)\n                        let ret := _4\n                        let slotValue := sload(_14)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr_2, length)\n                        let _16 := 0x20\n                        /// @src 0:969:970  \"1\"\n                        let _17 := 0x01\n                        /// @src 0:57:980  \"contract ZeekMessages {...\"\n                        switch and(slotValue, /** @src 0:969:970  \"1\" */ _17)\n                        case /** @src 0:57:980  \"contract ZeekMessages {...\" */ 0 {\n                            mstore(add(memPtr_2, _16), and(slotValue, not(255)))\n                            ret := add(add(memPtr_2, shl(5, iszero(iszero(length)))), _16)\n                        }\n                        case 1 {\n                            mstore(_4, _14)\n                            let dataPos := keccak256(_4, _16)\n                            let i_1 := _4\n                            for { } lt(i_1, length) { i_1 := add(i_1, _16) }\n                            {\n                                mstore(add(add(memPtr_2, i_1), _16), sload(dataPos))\n                                dataPos := add(dataPos, /** @src 0:969:970  \"1\" */ _17)\n                            }\n                            /// @src 0:57:980  \"contract ZeekMessages {...\"\n                            ret := add(add(memPtr_2, i_1), _16)\n                        }\n                        finalize_allocation(memPtr_2, sub(ret, memPtr_2))\n                        let memPos := mload(_2)\n                        mstore(memPos, _16)\n                        let length_1 := mload(memPtr_2)\n                        mstore(add(memPos, _16), length_1)\n                        let i_2 := _4\n                        for { } lt(i_2, length_1) { i_2 := add(i_2, _16) }\n                        {\n                            mstore(add(add(memPos, i_2), _2), mload(add(add(memPtr_2, i_2), _16)))\n                        }\n                        mstore(add(add(memPos, length_1), _2), _4)\n                        return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), _2))\n                    }\n                }\n                revert(0, 0)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function storage_array_index_access_string__dyn_ptr(index) -> slot, offset\n            {\n                let _1 := 0\n                if iszero(lt(index, sload(_1)))\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(_1, 0x24)\n                }\n                mstore(_1, _1)\n                slot := add(18569430475105882587588266137607568536673111973893317399460219858819262702947, index)\n                offset := _1\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212208fb00f3ca495819ea5d75a4aad3017555be9a14b47f5ae28e092ad2d6276ce5564736f6c63430008130033\"\n    }\n}\n",
      "hash": "0100007d77bfcb73a68b536489ad49bd983b78f6b9c79ae41c69960059cde277",
      "factoryDependencies": {}
    }
  })